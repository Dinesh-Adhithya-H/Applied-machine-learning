# -*- coding: utf-8 -*-
"""Assignment_2_DSML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pw98ZIjuhePOg839zmX1Bf2i9eMiq7C4
"""

import numpy as np
import sklearn as sk
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

!wget https://raw.githubusercontent.com/Dinesh-Adhithya-H/Applied-machine-learning/master/dsml_ass2_train.csv
!wget https://raw.githubusercontent.com/Dinesh-Adhithya-H/Applied-machine-learning/master/dsml_ass2_test_without-answer.csv

data=pd.read_csv("/content/dsml_ass2_train.csv",header=None,delimiter=",")
test=pd.read_csv("/content/dsml_ass2_test_without-answer.csv",delimiter=",")
test=test.drop(["Id"],axis=1)

import sklearn.utils
data=sklearn.utils.shuffle(data)

np.count_nonzero(data[14]),len(data[14])

y=data[14]

x=data.drop(14,axis=1)

x

corrMatrix = data.corr(method="pearson")
plt.figure(figsize=(15,10))
sns.heatmap(corrMatrix, annot=True)
plt.show()



from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.metrics import f1_score
xx=StandardScaler().fit(x)
x=xx.transform(x)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y)

from sklearn.linear_model import LogisticRegression
log_reg = LogisticRegression()
log_reg.fit(x_train,y_train)

from sklearn.model_selection import GridSearchCV
param_grid = {'C':[0.0001,0.001,0.01,0.1,1,2.5,5,10,100]}
gs_logit = GridSearchCV(LogisticRegression(),param_grid,scoring="f1",cv=5)
gs_logit.fit(x_train,y_train)
gs_logit.best_params_

y_pred=gs_logit.predict(x)
f1_score(y,y_pred)

from sklearn.svm import SVC
svc_clf = SVC()
svc_clf.fit(x_train,y_train)

y_pred=svc_clf.predict(x_test)

param_grid = {'degree':[2,3], 'C':[0.001,0.01,0.1,1,10,100],'coef0':[0.001,0.01,0.1,1,10,100]}
gs_polysvc = GridSearchCV(SVC(),param_grid,scoring='f1')
gs_polysvc.fit(x_train,y_train)

gs_polysvc.best_params_

gs_best_polysvc = gs_polysvc.best_estimator_
gs_best_polysvc.fit(x_train,y_train)
y_pred=gs_best_polysvc.predict(x_test)

f1_score(y_test,y_pred)

svc_rbf = SVC(kernel='rbf')
svc_rbf.fit(x_train,y_train)

y_pred=svc_rbf.predict(x_test)

f1_score(y_test,y_pred)

param_grid = {'degree':[2,3], 'C':[0.001,0.01,0.1,1,10,100],'gamma':[0.001,0.01,0.1,1,10,100]}
gs_rbf = GridSearchCV(SVC(kernel='rbf'),param_grid,cv=5,scoring='f1')
gs_rbf.fit(x_train,y_train)

gs_rbf.best_score_

svc_poly = SVC(kernel='poly')
svc_poly.fit(x_train,y_train)

y_pred=svc_poly.predict(x_test)

f1_score(y_test,y_pred)

param_grid = {'degree':[2,3], 'C':[0.001,0.01,0.1,1,10,100],'gamma':[0.001,0.01,0.1,1,10,100]}
gs_poly = GridSearchCV(SVC(kernel='poly'),param_grid,cv=5,scoring='f1')
gs_poly.fit(x_train,y_train)

gs_poly.best_score_

svc_sigmoid = SVC(kernel='sigmoid')
svc_sigmoid.fit(x_train,y_train)
y_pred=svc_sigmoid.predict(x_test)
f1_score(y_test,y_pred)

param_grid = {'degree':[2,3], 'C':[0.001,0.01,0.1,1,10,100],'gamma':[0.001,0.01,0.1,1,10,100]}
gs_sigmoid = GridSearchCV(SVC(kernel='poly'),param_grid,cv=5,scoring='f1')
gs_sigmoid.fit(x_train,y_train)

gs_sigmoid.best_score_

y_pred=gs_rbf.predict(x_test)
from sklearn.model_selection import cross_val_score
scores = cross_val_score(gs_rbf, x_train, y_train,scoring='f1')
f1_score(y_test,y_pred)

np.mean(scores)

scores_logistic = cross_val_score(gs_logit, x_train, y_train,scoring='f1')
scores_logistic

np.mean(scores_logistic)

scores_polysvc=cross_val_score(svc_poly, x_train, y_train,scoring='f1')
np.mean(scores_polysvc)

scores_polysvc

estimators=[('logistic',gs_logit), ('rbf', gs_rbf), ('polysvc', gs_polysvc)]
from sklearn.ensemble import VotingClassifier
ensemble = VotingClassifier(estimators)
ensemble.fit(x_train, y_train)
y_pred=ensemble.predict(x_test)

f1_score(y_test,y_pred)



"""so best f1 score on validation data is gs_rbf , so lets predict our testing data using that """

test_without_answer=pd.read_csv("/content/dsml_ass2_test_without-answer.csv")

test_without_answer

test_without_answer.drop(["Id"],inplace=True,axis=1)

testing_data=xx.transform(test_without_answer)

gs_logit.predict(testing_data)

gs_rbf.predict(testing_data)

ensemble.predict(testing_data)

svc_poly.predict(testing_data)

dataframe=pd.DataFrame()

dataframe["Category"]=gs_rbf.predict(testing_data)

dataframe["Id"]=np.arange(1,len(gs_rbf.predict(testing_data))+1)

dataframe.set_index(["Id"],inplace=True)

dataframe

